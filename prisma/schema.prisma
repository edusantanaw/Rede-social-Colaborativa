// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id
  name          String
  email         String          @unique
  password      String
  roles         String[]
  Project       Project[]
  Collaborators Collaborators[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now()) @updatedAt
  Invites       Invites[]
  Task          Task[]
  Message       Message[]

  @@map("user")
}

model Project {
  id            String          @id
  name          String
  description   String
  user          User            @relation(fields: [ownerId], references: [id])
  ownerId       String
  Collaborators Collaborators[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now()) @updatedAt
  Invites       Invites[]
  Task          Task[]
  Message       Message[]

  @@map("project")
}

model Collaborators {
  id        String  @id
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  @@map("collaborators")
}

model Invites {
  id        String   @id
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  invited   User     @relation(fields: [invitedId], references: [id])
  accepted  Boolean?
  invitedId String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("invites")
}

model Task {
  id          String   @id
  project     Project  @relation(fields: [projectId], references: [id])
  projectId   String
  title       String
  description String
  done        Boolean  @default(false)
  user        User?    @relation(fields: [assignedTo], references: [id])
  assignedTo  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}

model Message {
  id        String  @id
  message   String?
  file      String?
  project   Project @relation(fields: [projectId], references: [id])
  projectId String
  user      User    @relation(fields: [senderId], references: [id])
  senderId  String

  @@map("message")
}
